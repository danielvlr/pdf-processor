name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Job 1: Build e Test do Backend
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 📦 Instalar dependências do backend
        working-directory: ./backend
        run: npm ci

      - name: 🔨 Build do backend
        working-directory: ./backend
        run: npm run build

      - name: 🧪 Executar testes
        working-directory: ./backend
        run: npm test

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          flags: backend
          fail_ci_if_error: false

  # Job 2: Build do Frontend
  frontend:
    name: Frontend Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 📦 Instalar dependências do frontend
        working-directory: ./frontend
        run: npm ci

      - name: 🔨 Build do frontend
        working-directory: ./frontend
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

  # Job 3: Docker Build (Unified Image)
  docker:
    name: Docker Build (Unified)
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build Unified Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            pdf-processor:latest
            pdf-processor:v2.1.0
            pdf-processor:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=PDF Processor
            org.opencontainers.image.description=Batch PDF processing with header/footer removal
            org.opencontainers.image.version=2.1.0
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Image
        run: |
          docker run -d --name pdf-test -p 8080:80 pdf-processor:latest
          sleep 15
          curl --fail http://localhost:8080/health || exit 1
          docker stop pdf-test
          docker rm pdf-test

      - name: 📊 Image Info
        run: |
          echo "## Docker Image Info 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          docker images pdf-processor:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Image built and tested successfully!" >> $GITHUB_STEP_SUMMARY

  # Job 4: Lint e Code Quality (opcional)
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: 📦 Instalar dependências
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: 🔍 Verificar formatação (se tiver prettier)
        continue-on-error: true
        run: |
          if [ -f "backend/.prettierrc" ]; then
            cd backend && npx prettier --check "src/**/*.{ts,tsx}"
          fi

  # Job 5: Build Summary
  build-summary:
    name: 📊 Build Summary
    runs-on: ubuntu-latest
    needs: [backend, frontend, docker]
    if: always()

    steps:
      - name: 📊 Check build status
        run: |
          echo "## Build Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Backend: ${{ needs.backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Frontend: ${{ needs.frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** All builds completed!" >> $GITHUB_STEP_SUMMARY
